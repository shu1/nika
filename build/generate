#!/usr/bin/env ruby

require 'yaml'
require 'optparse'
require 'uglifier'
require 'pry' # deleteme

$verbose = false

class ManifestGenerator
  attr_reader :config

  def initialize(config)
    @config = config
  end

  def manifests
    platforms = config.keys.reject do |platform|
      platform == 'all'
    end.map do |platform|
      [platform, manifest_for(platform)]
    end.to_h
  end

  def manifest_for(platform)
    manifest = Hash.new { [] }

    default_files(platform).each do |directory, files|
      manifest[directory] = manifest[directory].concat(files)
    end

    custom_files(platform).each do |directory, files|
      manifest[directory] = manifest[directory].concat(files)
    end

    manifest
  end

  private
  def default_files(platform)
    files = config['all'] || {}
    sanitize_files(files)
  end

  def custom_files(platform)
    files = config[platform] || {}
    sanitize_files(files)
  end

  def sanitize_files(files)
    {
      'audio' => files['audio']  || [],
      'images' => files['images'] || [],
      'html'  => files['html']   || [],
      'js'    => files['js']     || []
    }
  end
end

def log(str)
  return unless $verbose
  puts str
end

OptionParser.new do |opts|
  opts.banner = "Usage: build/generate [options]"

  opts.on("-v", "--verbose", "Run verbosely") do
    $verbose = true
  end
end.parse!

build_dir = File.dirname(__FILE__)
output_dir = File.join(build_dir, 'output')
root_dir = File.join(build_dir, '..')
config_path = File.join(build_dir, 'config.yml')

config = YAML::load(File.open(config_path))
manifests = ManifestGenerator.new(config).manifests

unless Dir.exists?(output_dir)
  Dir.mkdir(output_dir)
end

manifests.each do |platform, manifest|
  log "----------------"
  log platform
  log "----------------"
  platform_dir = File.join(output_dir, platform)
  audio_dir    = File.join(platform_dir, 'audio')
  images_dir   = File.join(platform_dir, 'images')
  js_dir       = File.join(platform_dir, 'js')

  if Dir.exists?(platform_dir)
    `rm -r #{platform_dir}`
  end
  `mkdir #{platform_dir}`
  `mkdir #{audio_dir}`
  `mkdir #{images_dir}`
  `mkdir #{js_dir}`

  log "HTML"
  manifest['html'].each do |file|
    log "- #{file}"
    `cp #{File.join(root_dir, file)} #{platform_dir}`
  end

  log "AUDIO"
  manifest['audio'].each do |file|
    log "- #{file}"
    `cp -r #{File.join(root_dir, file)} #{audio_dir}`
  end

  log "IMAGES"
  manifest['images'].each do |file|
    log "- #{file}"
    `cp -r #{File.join(root_dir, file)} #{images_dir}`
  end

  log "JS"
  manifest['js'].each do |file|
    log "- #{file}"
    js_source_path = File.join(root_dir, file)
    js_source = File.open(js_source_path)
    ugly_js = Uglifier.compile(js_source.read)

    js_destination_path = File.join(js_dir, File.basename(js_source))
    `touch #{js_destination_path}`
    File.write(js_destination_path, ugly_js)
  end
end
